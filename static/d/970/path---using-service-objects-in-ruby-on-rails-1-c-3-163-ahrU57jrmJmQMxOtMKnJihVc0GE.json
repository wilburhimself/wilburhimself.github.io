{"data":{"site":{"siteMetadata":{"title":"Rants & Ramblings","author":"Wilbur Suero"}},"markdownRemark":{"id":"4c90b084-180d-5a84-8860-ee3876dad9e7","excerpt":"Once the application reaches a certain size, questions abouts architecture and code organization begin to appear.\nRails follows a Model View Controller…","html":"<p>Once the application reaches a certain size, questions abouts architecture and code organization begin to appear.\nRails follows a Model View Controller organization and there are some rules to keep your code organized:</p>\n<ul>\n<li>No <strong>Fat Models</strong> - don’t allow them to get bloated</li>\n<li>Keep <strong>views</strong> dumb - don’t put any logic in there</li>\n<li>Keep <strong>controllers</strong> skinny - don’t put too much there</li>\n</ul>\n<p>And it raises the first question: Where do I put all that code?</p>\n<h3>Introducing service objects</h3>\n<p>Service objects can be a class or a module in uby that perform an action and can help take out logic\nfrom other areas of the MVC structure. For a simple example, let’s say we have a controller like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class AccountsController &lt; ApplicationController\n  def create\n    @\n  end\nend</code></pre></div>","frontmatter":{"title":"Using Service Objects in Ruby on Rails","date":"June 01, 2019"}}},"pageContext":{"slug":"/using-service-objects-in-ruby-on-rails/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":null}}