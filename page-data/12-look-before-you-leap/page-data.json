{"componentChunkName":"component---src-templates-blog-post-js","path":"/12-look-before-you-leap/","result":{"data":{"site":{"siteMetadata":{"title":"Rants & Ramblings","author":"Wilbur Suero"}},"markdownRemark":{"id":"4699f1cb-9ab2-5ef0-b45e-613d208cacb4","excerpt":"Look before you leap is a principle that emphasizes the importance of verifying the state of a program before executing an action. This principle is…","html":"<p><strong>Look before you leap</strong> is a principle that emphasizes the importance of verifying the state of a program before executing an action. This principle is particularly useful when working with data structures, as it allows you to check if the data is valid and avoid potential errors or bugs.</p>\n<p>In Ruby, there are several ways to implement the <strong>Look before you leap</strong> principle. Here are some examples:</p>\n<h4>Checking for Nil Values</h4>\n<p>In Ruby, nil is a special value that represents the absence of a value. It’s important to check for nil values before using them to avoid runtime errors.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Example of checking for a nil value in Ruby</span>\n<span class=\"token keyword\">if</span> my_variable<span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span>\n  puts <span class=\"token string-literal\"><span class=\"token string\">\"my_variable is nil\"</span></span>\n<span class=\"token keyword\">else</span>\n  puts <span class=\"token string-literal\"><span class=\"token string\">\"my_variable is not nil\"</span></span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h4>Checking for an Empty Array</h4>\n<p>When working with arrays, it’s important to verify that the array is not empty before performing any actions on it.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Example of checking for an empty array in Ruby</span>\nmy_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">if</span> my_array<span class=\"token punctuation\">.</span>empty<span class=\"token operator\">?</span>\n  puts <span class=\"token string-literal\"><span class=\"token string\">\"my_array is empty\"</span></span>\n<span class=\"token keyword\">else</span>\n  puts <span class=\"token string-literal\"><span class=\"token string\">\"my_array is not empty\"</span></span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h4>Checking for a Key in a Hash</h4>\n<p>When working with hashes, it’s important to verify that a key exists before accessing its value.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Example of checking for a key in a hash in Ruby</span>\nmy_hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token symbol\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> my_hash<span class=\"token punctuation\">.</span>has_key<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:d</span><span class=\"token punctuation\">)</span>\n  puts <span class=\"token string-literal\"><span class=\"token string\">\"Key :d exists in my_hash\"</span></span>\n<span class=\"token keyword\">else</span>\n  puts <span class=\"token string-literal\"><span class=\"token string\">\"Key :d does not exist in my_hash\"</span></span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>While the “Look before you leap” principle is useful for preventing runtime errors, it may not be sufficient in cases where exceptions can occur. This is where the <code class=\"language-text\">begin-rescue</code> construct comes into play.</p>\n<p>The <code class=\"language-text\">begin-rescue</code> construct is used in Ruby to handle exceptions that may occur during program execution. Here’s an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">begin</span>\n  <span class=\"token comment\"># Code that may raise an exception</span>\n  result <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">rescue</span> <span class=\"token operator\">=></span> exception\n  <span class=\"token comment\"># Handle the exception</span>\n  puts <span class=\"token string-literal\"><span class=\"token string\">\"Error: </span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">exception<span class=\"token punctuation\">.</span>message</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>In this example, we attempt to divide the number 10 by 0, which would normally raise a <code class=\"language-text\">ZeroDivisionError</code> exception. However, we catch this exception using a <code class=\"language-text\">rescue</code> block and print an error message instead of allowing the exception to terminate the program.</p>\n<p>The <code class=\"language-text\">begin-rescue</code> construct is particularly useful when dealing with situations where exceptions can occur, such as when working with external APIs or user input. However, it’s important to remember that the “Look before you leap” principle should still be applied to prevent exceptions from occurring in the first place.</p>\n<p>The “Look before you leap” principle is a valuable programming principle that can help prevent errors and bugs in your code. While the <code class=\"language-text\">begin-rescue</code> construct is useful for handling exceptions, it’s important to verify the state of your program before executing code to prevent exceptions from occurring in the first place. By combining the two techniques, you can write more robust and reliable code that is less prone to errors and bugs.</p>","frontmatter":{"title":"Look before you leap","date":"April 15, 2023"}}},"pageContext":{"slug":"/12-look-before-you-leap/","previous":{"fields":{"slug":"/11-consise-data-extraction-pattern-matching-ruby/"},"frontmatter":{"title":"Concise Data Extraction with Pattern Matching in Ruby"}},"next":null}},"staticQueryHashes":["2418676009","3128451518"]}