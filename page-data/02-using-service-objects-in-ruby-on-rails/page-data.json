{"componentChunkName":"component---src-templates-blog-post-js","path":"/02-using-service-objects-in-ruby-on-rails/","result":{"data":{"site":{"siteMetadata":{"title":"Wilbur Suero - Software Craftsman","author":"Wilbur Suero"}},"markdownRemark":{"id":"58882157-a1ec-5286-ace2-6a7d6b5211f0","excerpt":"Once an application reaches certain size, questions about architecture begin to appear. Rails follows a Model View Controller organization and basic rules exist…","html":"<p>Once an application reaches certain size, questions about architecture begin to appear. Rails follows a Model View Controller organization and basic rules exist for clean code:</p>\n<ul>\n<li>No <strong>Fat Models</strong> - don’t allow them to get bloated</li>\n<li>Keep <strong>views</strong> dumb - don’t put any logic in there</li>\n<li>Keep <strong>controllers</strong> skinny - don’t put too much there</li>\n</ul>\n<p>And it raises the first question: Where do I put all that code?</p>\n<h3>Introducing service objects</h3>\n<p>Service objects can be a class or a module in Ruby that perform an action and can help take out logic from other areas of the MVC structure. For a simple example, let’s say we have a controller like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsController</span> <span class=\"token operator\">&lt;</span> ApplicationController\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create</span></span>\n    <span class=\"token variable\">@title</span> <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:title</span><span class=\"token punctuation\">]</span>\n    <span class=\"token variable\">@content</span> <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:content</span><span class=\"token punctuation\">]</span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">title</span><span class=\"token operator\">:</span> <span class=\"token variable\">@title</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">content</span><span class=\"token operator\">:</span> <span class=\"token variable\">@content</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>save\n      flash<span class=\"token punctuation\">.</span>notice <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'Post saved'</span></span>\n      render <span class=\"token variable\">@post</span>\n    <span class=\"token keyword\">else</span>\n      flash<span class=\"token punctuation\">.</span>alert <span class=\"token operator\">=</span> flash_error_message<span class=\"token punctuation\">(</span><span class=\"token variable\">@post</span><span class=\"token punctuation\">)</span>\n      redirect_to <span class=\"token symbol\">:new</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Extracting some of this into a service object is easy once you understand the design pattern.</p>\n<ul>\n<li>create a <code class=\"language-text\">services</code> folder in the Rails’ <code class=\"language-text\">app</code> folder</li>\n<li>create the service object file, in this example <code class=\"language-text\">create_post.rb</code></li>\n<li>extract the functionality to the <code class=\"language-text\">CreatePost</code> class/module</li>\n<li>reload the Rails app and try it</li>\n</ul>\n<h3>Service objects as modules</h3>\n<p>Using a module approach I created a service that looks very much like a factory design pattern:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token class-name\">CreatePost</span>\n  <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">self</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">execute</span></span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n      title <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:title</span><span class=\"token punctuation\">]</span>\n      content <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:content</span><span class=\"token punctuation\">]</span>\n      post <span class=\"token operator\">=</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">title</span><span class=\"token operator\">:</span> title<span class=\"token punctuation\">,</span> <span class=\"token symbol\">content</span><span class=\"token operator\">:</span> content<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Which in turn made the controller a lot more manageable:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsController</span> <span class=\"token operator\">&lt;</span> ApplicationController\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> CreatePost<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>save\n      flash<span class=\"token punctuation\">.</span>notice <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'Post saved'</span></span>\n      render <span class=\"token variable\">@post</span>\n    <span class=\"token keyword\">else</span>\n      flash<span class=\"token punctuation\">.</span>alert <span class=\"token operator\">=</span> flash_error_message<span class=\"token punctuation\">(</span><span class=\"token variable\">@post</span><span class=\"token punctuation\">)</span>\n      redirect_to <span class=\"token symbol\">:new</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Service objects as classes</h3>\n<p>In some cases we need to store instance variables and other methods, if so, we use classes. Using a class, our code could be rewritten as:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CreatePost</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@title</span> <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:title</span><span class=\"token punctuation\">]</span>\n    <span class=\"token variable\">@content</span> <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:content</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">call</span></span>\n    <span class=\"token class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">title</span><span class=\"token operator\">:</span> <span class=\"token variable\">@title</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">content</span><span class=\"token operator\">:</span> <span class=\"token variable\">@content</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>The code of the controller would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsController</span> <span class=\"token operator\">&lt;</span> ApplicationController\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">CreatePost</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>call\n    <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>save\n      flash<span class=\"token punctuation\">.</span>notice <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'Post saved'</span></span>\n      render <span class=\"token variable\">@post</span>\n    <span class=\"token keyword\">else</span>\n      flash<span class=\"token punctuation\">.</span>alert <span class=\"token operator\">=</span> flash_error_message<span class=\"token punctuation\">(</span><span class=\"token variable\">@post</span><span class=\"token punctuation\">)</span>\n      redirect_to <span class=\"token symbol\">:new</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Organizing service objects with modules</h3>\n<p>When we start using services our <code class=\"language-text\">services</code> folder tends to grow a lot. We can manage this growth by creating a modular structure using folders and modules.</p>\n<p>The <code class=\"language-text\">services</code> folder can reflect the variety of service objects and it’s different uses in our app. We group them in namespaces using Ruby modules.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token class-name\">Post</span>\n  <span class=\"token keyword\">module</span> <span class=\"token class-name\">Build</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span></span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n      title <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:title</span><span class=\"token punctuation\">]</span>\n      content <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:content</span><span class=\"token punctuation\">]</span>\n      <span class=\"token class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">title</span><span class=\"token operator\">:</span> title<span class=\"token punctuation\">,</span> <span class=\"token symbol\">content</span><span class=\"token operator\">:</span> content<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>To achieve this we have to place them in folders that reflects our module structure to let Rails load them.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">services/post/build.rb\nservices/post/update.rb\nservices/comments/build.rb\n...</code></pre></div>\n<p>This way our use of service objects can scale with the growth of our app.</p>","frontmatter":{"title":"Using Service Objects in Ruby on Rails","date":"March 15, 2019"}}},"pageContext":{"slug":"/02-using-service-objects-in-ruby-on-rails/","previous":{"fields":{"slug":"/01-hello-world/"},"frontmatter":{"title":"Hello World"}},"next":{"fields":{"slug":"/03-update-redux-form-fields-using-bindactioncreators/"},"frontmatter":{"title":"Updating redux-form fields using bindActionCreators"}}}},"staticQueryHashes":["2418676009","3128451518"]}