{"componentChunkName":"component---src-templates-blog-post-js","path":"/17-implementing-the-saga-design-pattern/","result":{"data":{"site":{"siteMetadata":{"title":"Wilbur Suero - Software Craftsman","author":"Wilbur Suero"}},"markdownRemark":{"id":"5c2fdc5a-35e3-5219-98d5-5978f8848bb8","excerpt":"In the world of microservices, maintaining data consistency across multiple services can be a challenging task. The Saga Design Pattern offers a solution by…","html":"<p>In the world of microservices, maintaining data consistency across multiple services can be a challenging task. The Saga Design Pattern offers a solution by breaking down a long transaction into a series of smaller, local transactions that can be managed independently. In this blog post, we’ll explore how to implement the Saga Design Pattern in a Ruby on Rails application, ensuring that your microservices remain consistent and resilient.</p>\n<h2>1. What is the Saga Design Pattern?</h2>\n<p>The Saga Design Pattern is a way to manage the consistency of operations across multiple services in a distributed system. Instead of a single, long transaction, a saga is composed of a series of smaller, local transactions. Each local transaction updates the database of its service and publishes a message or event to trigger the next local transaction in the saga. If a local transaction fails, the saga executes a series of compensating transactions to undo the changes that were made by the preceding local transactions.</p>\n<h2>2. Why Use the Saga Design Pattern?</h2>\n<ul>\n<li><strong>Scalability</strong>: By breaking down long transactions into smaller, independent transactions, the Saga Design Pattern allows for better scalability.</li>\n<li><strong>Resilience</strong>: The pattern provides a way to handle failures gracefully by rolling back changes through compensating transactions.</li>\n<li><strong>Isolation</strong>: Each local transaction operates within its own service, reducing the risk of conflicts and ensuring that failures in one service do not affect others.</li>\n</ul>\n<h2>3. Implementing the Saga Design Pattern</h2>\n<h3>Step 1: Define the Saga Workflow</h3>\n<p>The first step in implementing a saga is to define the workflow. This involves identifying the sequence of local transactions that need to be executed and the conditions under which each transaction should be triggered.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Example of a Saga Workflow</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderSaga</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@order</span> <span class=\"token operator\">=</span> order\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">execute</span></span>\n    create_order\n    reserve_inventory\n    charge_customer\n    complete_order\n  <span class=\"token keyword\">rescue</span> <span class=\"token operator\">=></span> e\n    rollback\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">private</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create_order</span></span>\n    <span class=\"token comment\"># Logic to create an order</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">reserve_inventory</span></span>\n    <span class=\"token comment\"># Logic to reserve inventory</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">charge_customer</span></span>\n    <span class=\"token comment\"># Logic to charge the customer</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">complete_order</span></span>\n    <span class=\"token comment\"># Logic to complete the order</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">rollback</span></span>\n    <span class=\"token comment\"># Logic to rollback the saga</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Step 2: Create Local Transactions</h3>\n<p>Each local transaction should be a self-contained operation that updates the database of its service. These transactions should be idempotent, meaning that they can be safely retried without causing unintended side effects.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Example of a Local Transaction</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateOrderTransaction</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">execute</span></span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n    order<span class=\"token punctuation\">.</span>save<span class=\"token operator\">!</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">compensate</span></span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n    order<span class=\"token punctuation\">.</span>destroy\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Step 3: Implement Compensation Logic</h3>\n<p>Compensation logic is used to undo the effects of a local transaction if it fails. Each local transaction should have a corresponding compensating transaction that reverses its changes.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Example of Compensation Logic</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReserveInventoryTransaction</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">execute</span></span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n    inventory <span class=\"token operator\">=</span> Inventory<span class=\"token punctuation\">.</span>find_by<span class=\"token punctuation\">(</span><span class=\"token symbol\">product_id</span><span class=\"token operator\">:</span> order<span class=\"token punctuation\">.</span>product_id<span class=\"token punctuation\">)</span>\n    inventory<span class=\"token punctuation\">.</span>decrement<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:quantity</span><span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">compensate</span></span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n    inventory <span class=\"token operator\">=</span> Inventory<span class=\"token punctuation\">.</span>find_by<span class=\"token punctuation\">(</span><span class=\"token symbol\">product_id</span><span class=\"token operator\">:</span> order<span class=\"token punctuation\">.</span>product_id<span class=\"token punctuation\">)</span>\n    inventory<span class=\"token punctuation\">.</span>increment<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:quantity</span><span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Step 4: Orchestrate the Saga</h3>\n<p>The saga should be orchestrated by a central coordinator that manages the execution of local transactions and handles any failures by triggering the appropriate compensating transactions.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Example of Saga Orchestration</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SagaOrchestrator</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>saga<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@saga</span> <span class=\"token operator\">=</span> saga\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">execute</span></span>\n    <span class=\"token variable\">@saga</span><span class=\"token punctuation\">.</span>execute\n  <span class=\"token keyword\">rescue</span> <span class=\"token operator\">=></span> e\n    <span class=\"token variable\">@saga</span><span class=\"token punctuation\">.</span>rollback\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2>4. Example: Order Processing Saga</h2>\n<p>Let’s consider an example of an order processing saga. The saga involves the following steps:</p>\n<ol>\n<li>Create an order.</li>\n<li>Reserve inventory.</li>\n<li>Charge the customer.</li>\n<li>Complete the order.</li>\n</ol>\n<p>If any step fails, the saga should roll back the changes made by the preceding steps.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderSaga</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@order</span> <span class=\"token operator\">=</span> order\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">execute</span></span>\n    create_order_transaction<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token variable\">@order</span><span class=\"token punctuation\">)</span>\n    reserve_inventory_transaction<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token variable\">@order</span><span class=\"token punctuation\">)</span>\n    charge_customer_transaction<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token variable\">@order</span><span class=\"token punctuation\">)</span>\n    complete_order_transaction<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token variable\">@order</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">rescue</span> <span class=\"token operator\">=></span> e\n    rollback\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">private</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create_order_transaction</span></span>\n    <span class=\"token class-name\">CreateOrderTransaction</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">reserve_inventory_transaction</span></span>\n    <span class=\"token class-name\">ReserveInventoryTransaction</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">charge_customer_transaction</span></span>\n    <span class=\"token class-name\">ChargeCustomerTransaction</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">complete_order_transaction</span></span>\n    <span class=\"token class-name\">CompleteOrderTransaction</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">rollback</span></span>\n    complete_order_transaction<span class=\"token punctuation\">.</span>compensate<span class=\"token punctuation\">(</span><span class=\"token variable\">@order</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@order</span><span class=\"token punctuation\">.</span>completed<span class=\"token operator\">?</span>\n    charge_customer_transaction<span class=\"token punctuation\">.</span>compensate<span class=\"token punctuation\">(</span><span class=\"token variable\">@order</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@order</span><span class=\"token punctuation\">.</span>charged<span class=\"token operator\">?</span>\n    reserve_inventory_transaction<span class=\"token punctuation\">.</span>compensate<span class=\"token punctuation\">(</span><span class=\"token variable\">@order</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@order</span><span class=\"token punctuation\">.</span>reserved<span class=\"token operator\">?</span>\n    create_order_transaction<span class=\"token punctuation\">.</span>compensate<span class=\"token punctuation\">(</span><span class=\"token variable\">@order</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@order</span><span class=\"token punctuation\">.</span>created<span class=\"token operator\">?</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2>5. Best Practices for Using the Saga Design Pattern</h2>\n<ul>\n<li><strong>Idempotency</strong>: Ensure that all local transactions are idempotent to handle retries safely.</li>\n<li><strong>Logging</strong>: Log the state of the saga at each step to facilitate debugging and auditing.</li>\n<li><strong>Timeout Handling</strong>: Implement timeouts for local transactions to prevent the saga from getting stuck.</li>\n<li><strong>Testing</strong>: Thoroughly test the saga and its compensating transactions to ensure that they handle all edge cases.</li>\n<li><strong>Monitoring</strong>: Monitor the state of the saga to ensure that it remains consistent and resilient.</li>\n</ul>\n<p>The Saga Design Pattern is a powerful tool for managing complex, distributed transactions in a microservices architecture. By breaking down long transactions into smaller, manageable pieces and providing a way to handle failures gracefully, the saga pattern helps ensure that your services remain consistent and resilient. </p>","frontmatter":{"title":"Implementing the Saga Design Pattern in Ruby on Rails","date":"September 12, 2024"}}},"pageContext":{"slug":"/17-implementing-the-saga-design-pattern/","previous":{"fields":{"slug":"/16-elevating-ruby-on-rails-codebase-value-objects/"},"frontmatter":{"title":"Elevating Your Ruby on Rails Apps with Value Objects"}},"next":null}},"staticQueryHashes":["2418676009","3128451518"]}