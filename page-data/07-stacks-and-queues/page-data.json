{"componentChunkName":"component---src-templates-blog-post-js","path":"/07-stacks-and-queues/","result":{"data":{"site":{"siteMetadata":{"title":"Wilbur Suero - Software Craftsman","author":"Wilbur Suero"}},"markdownRemark":{"id":"a6dcbf09-24a3-59d4-a5fc-800befd800bb","excerpt":"Stacks and Queues are two basic data structures used in computer science and software engineering. This post will explain what stacks and queues are, how they…","html":"<p>Stacks and Queues are two basic data structures used in computer science and software engineering. This post will explain what stacks and queues are, how they function, and how to use them in Ruby. I will also add RSpec tests for the implementations.</p>\n<h2><strong>Stacks</strong></h2>\n<p>A stack is a data structure that operates on the Last-In-First-Out (LIFO) principle. This indicates that the last item added to the stack will be the first to be deleted. Stacks are frequently used in programs to keep track of function calls (the call stack) or to reverse the order of items.</p>\n<p>Here’s an example of a basic Ruby stack implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span>\n    <span class=\"token variable\">@elements</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">push</span></span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@elements</span><span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">pop</span></span>\n    <span class=\"token variable\">@elements</span><span class=\"token punctuation\">.</span>pop\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">empty</span></span><span class=\"token operator\">?</span>\n    <span class=\"token variable\">@elements</span><span class=\"token punctuation\">.</span>empty<span class=\"token operator\">?</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>In this implementation, the push method is used to add an element to the top of the stack, the pop method is used to remove the top element from the stack, and the empty? method is used to determine whether the stack is empty.</p>\n<p>Here are some RSpec tests for our stack implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">describe Stack <span class=\"token keyword\">do</span>\n  describe <span class=\"token string-literal\"><span class=\"token string\">\"#push\"</span></span> <span class=\"token keyword\">do</span>\n    it <span class=\"token string-literal\"><span class=\"token string\">\"adds an element to the top of the stack\"</span></span> <span class=\"token keyword\">do</span>\n      stack <span class=\"token operator\">=</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n      stack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      stack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      expect<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>instance_variable_get<span class=\"token punctuation\">(</span><span class=\"token operator\">:</span><span class=\"token variable\">@elements</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to eq<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  describe <span class=\"token string-literal\"><span class=\"token string\">\"#pop\"</span></span> <span class=\"token keyword\">do</span>\n    it <span class=\"token string-literal\"><span class=\"token string\">\"removes the top element from the stack\"</span></span> <span class=\"token keyword\">do</span>\n      stack <span class=\"token operator\">=</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n      stack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      stack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      expect<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to eq<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      expect<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>instance_variable_get<span class=\"token punctuation\">(</span><span class=\"token operator\">:</span><span class=\"token variable\">@elements</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to eq<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  describe <span class=\"token string-literal\"><span class=\"token string\">\"#empty?\"</span></span> <span class=\"token keyword\">do</span>\n    it <span class=\"token string-literal\"><span class=\"token string\">\"returns true if the stack is empty\"</span></span> <span class=\"token keyword\">do</span>\n      stack <span class=\"token operator\">=</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n      expect<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>empty<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to be <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string-literal\"><span class=\"token string\">\"returns false if the stack is not empty\"</span></span> <span class=\"token keyword\">do</span>\n      stack <span class=\"token operator\">=</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n      stack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      expect<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>empty<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to be <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2><strong>Queues</strong></h2>\n<p>A Queue is a FIFO (First-In-First-Out) data structure. This implies that the first thing added to the queue will also be the first item withdrawn. Queues are frequently used to create waiting lines or to schedule jobs.</p>\n<p>Here’s an example of a simple Ruby queue implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span>\n    <span class=\"token variable\">@elements</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">enqueue</span></span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@elements</span><span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">dequeue</span></span>\n    <span class=\"token variable\">@elements</span><span class=\"token punctuation\">.</span>shift\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">empty</span></span><span class=\"token operator\">?</span>\n    <span class=\"token variable\">@elements</span><span class=\"token punctuation\">.</span>empty<span class=\"token operator\">?</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>In this implementation, the enqueue method is used to add an element to the end of the queue, and the dequeue method is used to remove the initial element from the queue, and the empty? method determines whether the queue is empty.</p>\n<p>Here are some RSpec tests for our queue implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">describe Queue <span class=\"token keyword\">do</span>\n  describe <span class=\"token string-literal\"><span class=\"token string\">\"#enqueue\"</span></span> <span class=\"token keyword\">do</span>\n    it <span class=\"token string-literal\"><span class=\"token string\">\"adds an element to the end of the queue\"</span></span> <span class=\"token keyword\">do</span>\n      queue <span class=\"token operator\">=</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n      queue<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      queue<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      expect<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>instance_variable_get<span class=\"token punctuation\">(</span><span class=\"token operator\">:</span><span class=\"token variable\">@elements</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to eq<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  describe <span class=\"token string-literal\"><span class=\"token string\">\"#dequeue\"</span></span> <span class=\"token keyword\">do</span>\n    it <span class=\"token string-literal\"><span class=\"token string\">\"removes the first element from the queue\"</span></span> <span class=\"token keyword\">do</span>\n      queue <span class=\"token operator\">=</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n      queue<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      queue<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      expect<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>dequeue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to eq<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      expect<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>instance_variable_get<span class=\"token punctuation\">(</span><span class=\"token operator\">:</span><span class=\"token variable\">@elements</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to eq<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  describe <span class=\"token string-literal\"><span class=\"token string\">\"#empty?\"</span></span> <span class=\"token keyword\">do</span>\n    it <span class=\"token string-literal\"><span class=\"token string\">\"returns true if the queue is empty\"</span></span> <span class=\"token keyword\">do</span>\n      queue <span class=\"token operator\">=</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n      expect<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>empty<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to be <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string-literal\"><span class=\"token string\">\"returns false if the queue is not empty\"</span></span> <span class=\"token keyword\">do</span>\n      queue <span class=\"token operator\">=</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n      queue<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      expect<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>empty<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to be <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>I’m thrilled to have shared my knowledge of stack and queue algorithms in Ruby with you. These fundamental ideas are necessary for any computer science student or programmer to understand. Experimenting with these algorithms in Ruby was a great learning experience for me, and I hope it was for you as well.</p>\n<p>It’s now your turn! I’d love to learn about how you’ve implemented these techniques in different programming languages. Share your ideas, ask questions, and let’s keep growing and learning together. Don’t be afraid to post a comment. I’m looking forward to hearing from you!</p>","frontmatter":{"title":"Stacks and Queues","date":"February 10, 2023"}}},"pageContext":{"slug":"/07-stacks-and-queues/","previous":{"fields":{"slug":"/06-maximizing-productivity-as-software-developer/"},"frontmatter":{"title":"Maximizing Productivity as a Software Developer - My 7 Go-To Techniques"}},"next":{"fields":{"slug":"/08-hash-maps/"},"frontmatter":{"title":"Hash Maps"}}}},"staticQueryHashes":["2418676009","3128451518"]}