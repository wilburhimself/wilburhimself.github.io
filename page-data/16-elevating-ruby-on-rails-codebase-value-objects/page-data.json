{"componentChunkName":"component---src-templates-blog-post-js","path":"/16-elevating-ruby-on-rails-codebase-value-objects/","result":{"data":{"site":{"siteMetadata":{"title":"Wilbur Suero - Software Craftsman","author":"Wilbur Suero"}},"markdownRemark":{"id":"c9799afe-efb0-51a7-a972-95c60afcd2a3","excerpt":"I’ll never forget the day my team and I sat down to review the codebase for our latest Ruby on Rails project. As we dove into the details, it quickly became…","html":"<p>I’ll never forget the day my team and I sat down to review the codebase for our latest Ruby on Rails project. As we dove into the details, it quickly became clear that our code was a tangled web of conditional logic, duplicated calculations, and a general lack of consistency. It was a mess - the kind of thing that keeps developers up at night.</p>\n<p>That’s when I realized we were missing an important tool in our application architecture: value objects. These small, immutable objects had the potential to transform our codebase from chaotic to clean, from error-prone to robust. In this post, we’ll explore what value objects are, why they’re so beneficial, and how to implement them in your Ruby on Rails projects.</p>\n<h3>What is a Value Object?</h3>\n<p>A value object is a small, immutable object that represents a specific value or concept within your application. Unlike an entity object, which has an identity and can change over time, a value object is purely defined by its attributes. Two value objects are considered equal if they have the same attribute values, regardless of their object identity.</p>\n<p>Value objects are commonly used to represent things like money, dates, addresses, or any other domain-specific concept that doesn’t have a unique identity. By encapsulating these values into their own objects, you can improve the overall design and maintainability of your codebase.</p>\n<h3>Benefits of Using Value Objects</h3>\n<p>Employing value objects in your Ruby on Rails applications can provide several benefits:</p>\n<ol>\n<li><strong>Improved Code Readability</strong>: Value objects make your code more expressive and self-documenting. Instead of working with raw data types, you’re interacting with objects that represent meaningful concepts in your domain.</li>\n<li><strong>Increased Robustness</strong>: Value objects are immutable, meaning their state cannot be changed after creation. This helps prevent unintended side effects and makes it easier to reason about your code.</li>\n<li><strong>Enhanced Reusability</strong>: Value objects can be easily shared and reused across different parts of your application, promoting code consistency and reducing duplication.</li>\n<li><strong>Better Error Handling</strong>: Value objects can encapsulate validation logic, ensuring that only valid values are used throughout your application. This can catch errors earlier and provide more helpful error messages.</li>\n</ol>\n<h3>Implementing Value Objects in Ruby on Rails</h3>\n<p>Let’s look at an example of how you might implement a value object for representing a monetary amount in a Rails application.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># app/value_objects/money.rb</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Money</span>\n  <span class=\"token keyword\">include</span> Comparable\n\n  attr_reader <span class=\"token symbol\">:amount</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:currency</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@amount</span> <span class=\"token operator\">=</span> amount\n    <span class=\"token variable\">@currency</span> <span class=\"token operator\">=</span> currency\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">raise</span> ArgumentError<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"Cannot add values with different currencies\"</span></span> <span class=\"token keyword\">if</span> currency <span class=\"token operator\">!=</span> other<span class=\"token punctuation\">.</span>currency\n    <span class=\"token class-name\">Money</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">+</span> other<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">raise</span> ArgumentError<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"Cannot subtract values with different currencies\"</span></span> <span class=\"token keyword\">if</span> currency <span class=\"token operator\">!=</span> other<span class=\"token punctuation\">.</span>currency\n    <span class=\"token class-name\">Money</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">-</span> other<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>scalar<span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Money</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">*</span> scalar<span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>scalar<span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Money</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">/</span> scalar<span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">&lt;=></span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">raise</span> ArgumentError<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"Cannot compare values with different currencies\"</span></span> <span class=\"token keyword\">if</span> currency <span class=\"token operator\">!=</span> other<span class=\"token punctuation\">.</span>currency\n    amount <span class=\"token operator\">&lt;=></span> other<span class=\"token punctuation\">.</span>amount\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">to_s</span></span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">amount</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">currency</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n  <span class=\"token keyword\">end</span></code></pre></div>\n<p>In this example, we’ve created a <code class=\"language-text\">Money</code> value object that encapsulates a monetary amount and its associated currency. The object includes common arithmetic operations, such as addition, subtraction, multiplication, and division, as well as comparison methods. This allows us to perform monetary calculations in a safe and intuitive way.</p>\n<p>The reason we’ve included the <code class=\"language-text\">Comparable</code> module in the <code class=\"language-text\">Money</code> class is to enable comparison operations between <code class=\"language-text\">Money</code> objects. By including <code class=\"language-text\">Comparable</code>, we can use comparison operators like <code class=\"language-text\">&lt;</code>, <code class=\"language-text\">></code>, <code class=\"language-text\">&lt;=</code>, <code class=\"language-text\">>=</code>, and <code class=\"language-text\">==</code> to compare the values of <code class=\"language-text\">Money</code> objects. This allows us to perform operations like sorting, min/max, and other comparison-based logic on Money objects, making the code more expressive and easier to work with.</p>\n<p>Here’s how you might use the <code class=\"language-text\">Money</code> value object in a Rails controller:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># app/controllers/orders_controller.rb</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrdersController</span> <span class=\"token operator\">&lt;</span> ApplicationController\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create</span></span>\n    total_price <span class=\"token operator\">=</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'USD'</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">50.0</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'USD'</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> total_price <span class=\"token operator\">></span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">149.99</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'USD'</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># Do something with the order total</span>\n    <span class=\"token keyword\">else</span>\n      <span class=\"token comment\"># Handle the case where the total is less than $149.99</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token variable\">@order</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">total_price</span><span class=\"token operator\">:</span> total_price<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token variable\">@order</span><span class=\"token punctuation\">.</span>save\n      redirect_to <span class=\"token variable\">@order</span>\n    <span class=\"token keyword\">else</span>\n      render <span class=\"token symbol\">:new</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>By using the <code class=\"language-text\">Money</code> value object, we can ensure that all monetary calculations in our application are performed correctly and with the appropriate currency handling.</p>\n<p>Incorporating value objects into your Ruby on Rails applications can lead to significant improvements in code quality, maintainability, and robustness. By encapsulating domain-specific concepts into their own objects, you can write more expressive, self-documenting code that is less prone to errors.</p>","frontmatter":{"title":"Elevating Your Ruby on Rails Apps with Value Objects","date":"April 18, 2024"}}},"pageContext":{"slug":"/16-elevating-ruby-on-rails-codebase-value-objects/","previous":{"fields":{"slug":"/15-mastering-decorator-pattern-ruby-on-rails/"},"frontmatter":{"title":"Mastering the decorator pattern in Ruby on Rails"}},"next":null}},"staticQueryHashes":["2418676009","3128451518"]}