{"componentChunkName":"component---src-templates-blog-post-js","path":"/15-mastering-decorator-pattern-ruby-on-rails/","result":{"data":{"site":{"siteMetadata":{"title":"Wilbur Suero - Software Craftsman","author":"Wilbur Suero"}},"markdownRemark":{"id":"0e9f1c86-6bd3-5539-bc04-fb98cffc6c38","excerpt":"As Ruby on Rails developers, we’re often faced with the challenge of adding new features or modifying the behavior of existing components without introducing…","html":"<p>As Ruby on Rails developers, we’re often faced with the challenge of adding new features or modifying the behavior of existing components without introducing unnecessary complexity or tight coupling. One design pattern that can help us address this challenge is the Decorator Pattern. In this blog post, we’ll explore the Decorator Pattern, understand its benefits, and see how we can apply it in our Ruby on Rails applications.</p>\n<h3>What is the Decorator Pattern?</h3>\n<p>The Decorator Pattern is a structural design pattern that allows us to add responsibilities to individual objects dynamically, without affecting the behavior of other objects from the same class. It works by wrapping an object with one or more decorator objects, each of which adds a specific piece of functionality.</p>\n<p>In the context of Ruby on Rails, we can use the Decorator Pattern to enhance the functionality of our models, services, or other components, while keeping our codebase modular and maintainable.</p>\n<h3>Advantages of the Decorator Pattern</h3>\n<p>The Decorator Pattern offers several benefits that make it a valuable tool in your Ruby on Rails toolkit:</p>\n<ol>\n<li><strong>Flexibility</strong>: Decorators allow you to add or modify the behavior of an object without changing its core functionality. This makes it easier to introduce new features or adapt to changing requirements.</li>\n<li><strong>Maintainability</strong>: By encapsulating specific responsibilities in decorators, you can keep your core classes focused and easier to understand. This promotes better code organization and readability.</li>\n<li><strong>Testability</strong>: Decorators can be tested in isolation, which simplifies the testing process and makes it easier to ensure the correctness of your application.</li>\n<li><strong>Composition over Inheritance</strong>: The Decorator Pattern encourages composition over inheritance, which is generally considered a better design principle, as it promotes more flexible and reusable code.</li>\n</ol>\n<h3>Implementing the Decorator Pattern in Ruby on Rails</h3>\n<p>Let’s consider an example of how you might use the Decorator Pattern in a Ruby on Rails application. Imagine you have a <code class=\"language-text\">User</code> model, and you want to add some additional functionality, such as formatting the user’s name and displaying their full address.</p>\n<p>Without the Decorator Pattern, you might be tempted to add these methods directly to the <code class=\"language-text\">User</code> model. However, this would result in a model that is responsible for too many concerns, making it harder to maintain and test.</p>\n<p>Instead, let’s create a <code class=\"language-text\">UserDecorator</code> class that wraps the <code class=\"language-text\">User</code> model and adds the desired functionality:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDecorator</span> <span class=\"token operator\">&lt;</span> SimpleDelegator\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">full_name</span></span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">first_name</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">last_name</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">full_address</span></span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">address_line_1</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">address_line_2</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">city</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">state</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">zip_code</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>In this example, the <code class=\"language-text\">UserDecorator</code> class inherits from <code class=\"language-text\">SimpleDelegator</code>, which is a built-in Ruby class that provides a simple way to implement the Decorator Pattern. The <code class=\"language-text\">UserDecorator</code> class delegates all method calls to the wrapped <code class=\"language-text\">User</code> object, and then adds the <code class=\"language-text\">full_name</code> and <code class=\"language-text\">full_address</code> methods on top of that.</p>\n<p>Now, in your application, you can use the <code class=\"language-text\">UserDecorator</code> like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ndecorated_user <span class=\"token operator\">=</span> <span class=\"token class-name\">UserDecorator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\nputs decorated_user<span class=\"token punctuation\">.</span>full_name <span class=\"token comment\"># Output: \"John Doe\"</span>\nputs decorated_user<span class=\"token punctuation\">.</span>full_address <span class=\"token comment\"># Output: \"123 Main St, Apt 4, Anytown, CA 12345\"</span></code></pre></div>\n<p>By using the Decorator Pattern, you’ve kept your <code class=\"language-text\">User</code> model focused on its core responsibilities, while adding the additional functionality in a separate, composable component.</p>\n<h3>Advanced Decorator Patterns in Ruby on Rails</h3>\n<p>The basic Decorator Pattern shown above is just the beginning. In Ruby on Rails, you can also explore more advanced decorator patterns, such as:</p>\n<h4>1 - Facility Decorator</h4>\n<p>Imagine you have a <code class=\"language-text\">FacilityService</code> that is responsible for managing facilities in your application. The basic <code class=\"language-text\">FacilityService</code> might look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># app/services/facility_service.rb</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FacilityService</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_facility</span></span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    Facility<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create_facility</span></span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span>\n    Facility<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">update_facility</span></span><span class=\"token punctuation\">(</span>facility<span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">)</span>\n    facility<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span>\n    facility\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Now, let’s say you want to add some additional functionality to the <code class=\"language-text\">FacilityService</code>, such as caching the results of the <code class=\"language-text\">get_facility</code> method. You can use the Decorator Pattern to achieve this without modifying the original <code class=\"language-text\">FacilityService</code> class.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># app/decorators/caching_facility_service_decorator.rb</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CachingFacilityServiceDecorator</span> <span class=\"token operator\">&lt;</span> SimpleDelegator\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_facility</span></span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    Rails<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"facility_</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">id</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create_facility</span></span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span>\n    facility <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span>\n    Rails<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"facility_</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">facility<span class=\"token punctuation\">.</span>id</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    facility\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">update_facility</span></span><span class=\"token punctuation\">(</span>facility<span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">)</span>\n    updated_facility <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>facility<span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">)</span>\n    Rails<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"facility_</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">facility<span class=\"token punctuation\">.</span>id</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    updated_facility\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>In this example, the <code class=\"language-text\">CachingFacilityServiceDecorator</code> wraps the original <code class=\"language-text\">FacilityService</code> and adds caching functionality to the <code class=\"language-text\">get_facility</code> method. It uses the <code class=\"language-text\">Rails.cache.fetch</code> method to retrieve the facility from the cache if available, or fetch it from the database and store the result in the cache. Additionally, the <code class=\"language-text\">create_facility</code> and <code class=\"language-text\">update_facility</code> methods are decorated to invalidate the cache when a facility is created or updated.</p>\n<h4>2 - View Decorator</h4>\n<p>You can also use the Decorator Pattern to enhance the presentation logic of your views. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># app/decorators/user_view_decorator.rb</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserViewDecorator</span> <span class=\"token operator\">&lt;</span> SimpleDelegator\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">formatted_name</span></span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">first_name</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">last_name</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">formatted_email</span></span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">email</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\"> (</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">role</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">)\"</span></span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># Usage in a view</span>\n<span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> <span class=\"token class-name\">UserViewDecorator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>formatted_name <span class=\"token string-literal\"><span class=\"token string\">%>&lt;/h1></span></span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> <span class=\"token class-name\">UserViewDecorator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>formatted_email <span class=\"token string-literal\"><span class=\"token string\">%>&lt;/p></span></span></code></pre></div>\n<h4>3 - Model Decorator</h4>\n<p>Finally, you can use the Decorator Pattern to extend the behavior of your models:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># app/decorators/user_model_decorator.rb</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserModelDecorator</span> <span class=\"token operator\">&lt;</span> SimpleDelegator\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">save</span></span>\n    before_save\n    <span class=\"token keyword\">super</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">private</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">before_save</span></span>\n    <span class=\"token comment\"># Add custom validation or business logic</span>\n    errors<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token symbol\">:name</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'cannot be blank'</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">.</span>blank<span class=\"token operator\">?</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># Usage</span>\nuser <span class=\"token operator\">=</span> <span class=\"token class-name\">UserModelDecorator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">''</span></span>\nuser<span class=\"token punctuation\">.</span>save <span class=\"token comment\"># => false, user.errors.full_messages # => [\"Name cannot be blank\"]</span></code></pre></div>\n<p>In this example, the <code class=\"language-text\">UserModelDecorator</code> wraps a <code class=\"language-text\">User</code> model and adds a <code class=\"language-text\">before_save</code> hook that performs custom validation.</p>\n<p>By mastering the Decorator Pattern and its various applications, you can create more modular, testable, and maintainable Ruby on Rails applications that are better equipped to handle evolving requirements and growing complexity.</p>\n<p>The Decorator Pattern is a powerful tool in the Ruby on Rails developer’s arsenal. By separating concerns and allowing you to dynamically add responsibilities to objects, the Decorator Pattern can help you build more flexible, testable, and maintainable applications. As you continue to develop your Ruby on Rails skills, keep the Decorator Pattern in mind as a way to organize your codebase and promote best practices.</p>","frontmatter":{"title":"Mastering the decorator pattern in Ruby on Rails","date":"April 15, 2024"}}},"pageContext":{"slug":"/15-mastering-decorator-pattern-ruby-on-rails/","previous":{"fields":{"slug":"/14-autocomplete-on-scale-with-ruby-on-rails/"},"frontmatter":{"title":"Autocomplete at Scale - How Tries and Partitioning Can Unlock Blazing-Fast Search in Ruby on Rails"}},"next":{"fields":{"slug":"/16-elevating-ruby-on-rails-codebase-value-objects/"},"frontmatter":{"title":"Elevating Your Ruby on Rails Apps with Value Objects"}}}},"staticQueryHashes":["2418676009","3128451518"]}